part 1: DLT homography

# Ensure the points are in homogeneous coordinates
    I1pts_hom = np.vstack((I1pts, np.ones((1, I1pts.shape[1]))))
    I2pts_hom = np.vstack((I2pts, np.ones((1, I2pts.shape[1]))))

    # Construct the matrix A
    A = []
    for i in range(I1pts.shape[1]):
        x, y = I1pts[:, i]
        u, v = I2pts[:, i]
        A.append([-x, -y, -1, 0, 0, 0, u*x, u*y, u])
        A.append([0, 0, 0, -x, -y, -1, v*x, v*y, v])
    A = np.array(A)

    # Compute the homography matrix H using the null space of A
    H = null_space(A).reshape(3, 3)

    # Normalize H to make the bottom-right value 1
    H /= H[2, 2]

# part 2: Bilinear interpolation


x, y = pt[0, 0], pt[1, 0]
    x0, y0 = int(np.floor(x)), int(np.floor(y))
    x1, y1 = x0 + 1, y0 + 1

    if x0 < 0 or y0 < 0 or x1 >= I.shape[1] or y1 >= I.shape[0]:
        raise ValueError('Point is outside the image boundaries.')

    Ia = I[y0, x0]
    Ib = I[y0, x1]
    Ic = I[y1, x0]
    Id = I[y1, x1]

    wa = (x1 - x) * (y1 - y)
    wb = (x - x0) * (y1 - y)
    wc = (x1 - x) * (y - y0)
    wd = (x - x0) * (y - y0)

    b = round(wa * Ia + wb * Ib + wc * Ic + wd * Id)

# Part 3: histogram 

# 1. Compute histogram of I
    hist, bins = np.histogram(I.flatten(), bins=256, range=(0, 256))
    # 2. Compute CDF of I
    cdf = hist.cumsum()
    # 3. Normalize CDF to [0, 255]
    cdf = 255 * cdf / cdf[-1]
    # 4. Interpolate pixel values using CDF
    J = np.interp(I.flatten(), bins[:-1], cdf).reshape(I.shape).astype(np.uint8)